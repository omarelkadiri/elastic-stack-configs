input {
  tcp {
    port => 514
    add_field => { "[agent][type]" => "syslog" }
  }

  beats {
    port => 5044
   # ssl_enabled => true
   # ssl_certificate => "/etc/logstash/certs/logstash.crt"
   # ssl_certificate_authorities => ["/etc/logstash/certs/ca.crt"]
   # ssl_key => "/etc/logstash/certs/logstash.pkcs8.key"
   # ssl_verify_mode => "force_peer"
  }
}


filter {
  if [@metadata][beat] == "packetbeat" {

      #mutate {
        #add_field => { "log_type" => "packetbeat" }
      #}

  }
  else if [@metadata][type] == "syslog" {
    # Filtre pour les logs Syslog
    grok {
        match => { "message" => [
"<%{INT:PRI}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}\[%{POSINT:pid}\]: %{POSINT:rule_id},%{DATA:info1},%{DATA:info2},%{NOTSPACE:id_section},%{WORD:interface},%{WORD:corresp},%{WORD:action},%{WORD:direction},%{POSINT:ipv},%{WORD:tos},%{DATA:add_field},%{POSINT:ttl},%{NUMBER:id_packet},%{DATA:offset},%{WORD:flags},%{POSINT:num_protocol},%{WORD:transport},%{NUMBER:size_packet},%{IPV4:src_ip},%{IPV4:dest_ip},%{INT:src_port},%{INT:dest_port},%{GREEDYDATA:more_data}",
"<%{INT:PRI}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}\[%{POSINT:pid}\]: %{POSINT:rule_id},%{DATA:info1},%{DATA:info2},%{NOTSPACE:id_section},%{WORD:interface},%{WORD:corresp},%{WORD:action},%{WORD:direction},%{POSINT:ipv},%{WORD:flags},%{WORD:tos},%{POSINT:ttl},%{WORD:transport},%{POSINT:size_header},%{NUMBER:size_packet},%{IPV6:src_ip},%{IPV6:dest_ip},%{INT:src_port},%{INT:dest_port},%{GREEDYDATA:more_data}",
"<%{INT:PRI}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}\[%{POSINT:pid}\]: %{POSINT:rule_id},%{DATA:info1},%{DATA:info2},%{NOTSPACE:id_section},%{WORD:interface},%{WORD:corresp},%{WORD:action},%{WORD:direction},%{POSINT:ipv},%{WORD:tos},%{DATA:add_field},%{POSINT:ttl},%{NUMBER:id_packet},%{DATA:offset},%{WORD:flags},%{POSINT:num_protocol},%{WORD:transport},%{NUMBER:size_packet},%{IPV4:src_ip},%{IPV4:dest_ip},%{GREEDYDATA:more_data}",
"<%{INT:pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{WORD:program}\[%{POSINT:pid}\]: user %{USERNAME:user} %{GREEDYDATA:resutlt} for %{WORD:service}\.? \[using %{GREEDYDATA:auth_method}\]",
"<%{INT:pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{WORD:program}\[%{POSINT:pid}\]: %{GREEDYDATA:action} for user '%{USERNAME:user}' from: %{IPV4:src_ip}"
]
      }
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

    mutate {
      add_field => { "[agent][type]" => "syslog" }
    }


  }

    if  "_grokparsefailure" not in [tags] {
      mutate { add_field => { "[@metadata][index_name]" => "network-logs-%{[agent][type]}" } }
    }
    else {
      mutate { add_field => { "[@metadata][index_name]" => "more-logs" } }
    }

  # Filtre commun pour les logs Packetbeat et Syslog
  mutate {
    lowercase => [ "[host][hostname]", "[agent][type]" ]
    convert => { "response_code" => "integer" }
  }
}

output {
    elasticsearch {
      hosts => ["https://node1.elastic.test.com:9200"]
      index => "%{[@metadata][index_name]}-%{+YYYY.MM.dd}"
      user =>"elastic"
      password => "147896325"
      ssl_enabled => true
      ssl_verification_mode => none
    }
    stdout {
        codec => rubydebug  
    }

}
